// ---- CSS3 SASS MIXINS ----
// https://github.com/madr/css3-sass-mixins
//
//  Copyright (C) 2011 by Anders Ytterstr√∂m
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//

// ---- LEGACY IE SUPPORT USING FILTERS ----
//  Should IE filters be used or not?
//  PROS: gradients, drop shadows etc will be handled by css.
//  CONS: will harm the site performance badly,
//        especially on sites with heavy rendering and scripting.
$useIEFilters: 0;
// might be 0 or 1. disabled by default.
// ---- /LEGACY IE SUPPORT USING FILTERS ----


@mixin background-size ($value) {
  -webkit-background-size: $value;
          background-size: $value;
}

@mixin border-image ($path, $offsets, $repeats) {
     -moz-border-image: $path $offsets $repeats;
       -o-border-image: $path $offsets $repeats;
  -webkit-border-image: $path $offsets $repeats;
          border-image: $path $offsets $repeats;
}

@mixin border-radius ($values) {
     -moz-border-radius: $values;
  -webkit-border-radius: $values;
          border-radius: $values;
             -moz-background-clip: padding;
          -webkit-background-clip: padding-box;
                  background-clip: padding-box;
}

@mixin box-shadow ($x, $y, $offset, $hex, $ie: $useIEFilters, $inset: null, $spread:null) {
     -moz-box-shadow: $x $y $offset $spread $hex $inset;
  -webkit-box-shadow: $x $y $offset $spread $hex $inset;
          box-shadow: $x $y $offset $spread $hex $inset;

  @if $ie == 1 {
    $iecolor: '#' + red($hex) + green($hex) + blue($hex);
    filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=#{$x}, OffY=#{$y}, Color='#{$iecolor}');
    -ms-filter: quote(progid:DXImageTransform.Microsoft.dropshadow(OffX=#{$x}, OffY=#{$y}, Color='#{$iecolor}'));
  }
}
@mixin shadow ($shadow1, $shadow2: transparent 0 0 0, $shadow3: transparent 0 0 0) {
     -moz-box-shadow: $shadow1, $shadow2, $shadow3;
  -webkit-box-shadow: $shadow1, $shadow2, $shadow3;
          box-shadow: $shadow1, $shadow2, $shadow3;
}

@mixin box-sizing($value) {
     -moz-box-sizing: $value;
  -webkit-box-sizing: $value;
          box-sizing: $value;
}

// requires sass 3.2
//@mixin keyframes {
//     @-moz-keyframes { @content; }
//      @-ms-keyframes { @content; }
//       @-o-keyframes { @content; }
//  @-webkit-keyframes { @content; }
//          @keyframes { @content; }
//}

@mixin linear-gradient($from, $to, $ie: $useIEFilters) {
  @if $ie != 1 { background-color: $to; }

  background-image: -webkit-gradient(linear,left top,left bottom,color-stop(0, $from),color-stop(1, $to));
  background-image: -webkit-linear-gradient(top, $from, $to);
  background-image: -moz-linear-gradient(top, $from, $to);
  background-image: -ms-linear-gradient(top, $from, $to);
  background-image: -o-linear-gradient(top, $from, $to);
  background-image: linear-gradient(top, bottom, $from, $to);

  @if $ie == 1 {
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$from}', endColorstr='#{$to}');
    -ms-filter: quote(progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$from}', endColorstr='#{$to}'));
  }
}

@mixin gradient ($startColor: #eee, $endColor: #fff, $base: #f1f1f1) {
  background: -webkit-gradient(linear, left top, left bottom, from($startColor), to($endColor)) $base;
  background: -webkit-linear-gradient(top, $startColor, $endColor) $base;
  background: -moz-linear-gradient(top, $startColor, $endColor) $base;
  background: -ms-linear-gradient(top, $startColor, $endColor) $base;
  background: -o-linear-gradient(top, $startColor, $endColor) $base;
  background-color: $base;
}
@mixin gradientHorizontal ($startColor: #eee, $endColor: #fff, $base: #f2f2f2) {
  background: $base;
  background: -moz-linear-gradient(left, $startColor 0%, $endColor 100%), $base;
  background: -webkit-gradient(linear, left top, right top, color-stop(0%,$startColor), color-stop(100%,$endColor)), $base;
  background: -webkit-linear-gradient(left, $startColor 0%,$endColor 100%), $base;
  background: -o-linear-gradient(left, $startColor 0%, $endColor 100%), $base;
  background: -ms-linear-gradient(left, $startColor 0%, $endColor 100%), $base;
  background: linear-gradient(to right, $startColor 0%, $endColor 100%), $base;
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$startColor', endColorstr='$endColor',GradientType=1 );
}
@mixin gradientIMG ($startColor: #eee, $endColor: white, $img: #f1f1f1) {
  background: $img, -webkit-gradient(linear, left top, left bottom, from($startColor), to($endColor));
  background: $img, -webkit-linear-gradient(top, $startColor, $endColor);
  background: $img, -moz-linear-gradient(top, $startColor, $endColor);
  background: $img, -ms-linear-gradient(top, $startColor, $endColor);
  background: $img, -o-linear-gradient(top, $startColor, $endColor);
}


@mixin gradient-chrome ($base: #000) {
  background: $base; /* Old browsers */
  background: -moz-linear-gradient(top, rgba(255,255,255,0.2) 0%, rgba(255,255,255,0.03) 50%, rgba(0,0,0,0.3) 51%, rgba(0,0,0,0.6) 100%) $base; /* FF3.6+ */
  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgba(255,255,255,0.2)), color-stop(50%,rgba(255,255,255,0.03)), color-stop(51%,rgba(0,0,0,0.3)), color-stop(100%,rgba(0,0,0,0.6))) $base; /* Chrome,Safari4+ */
  background: -webkit-linear-gradient(top, rgba(255,255,255,0.2) 0%,rgba(255,255,255,0.03) 50%,rgba(0,0,0,0.3) 51%,rgba(0,0,0,0.6) 100%) $base; /* Chrome10+,Safari5.1+ */
  background: -o-linear-gradient(top, rgba(255,255,255,0.2) 0%,rgba(255,255,255,0.03) 50%,rgba(0,0,0,0.3) 51%,rgba(0,0,0,0.6) 100%) $base; /* Opera 11.10+ */
  background: -ms-linear-gradient(top, rgba(255,255,255,0.2) 0%,rgba(255,255,255,0.03) 50%,rgba(0,0,0,0.3) 51%,rgba(0,0,0,0.6) 100%) $base; /* IE10+ */
  background: linear-gradient(to bottom, rgba(255,255,255,0.2) 0%,rgba(255,255,255,0.03) 50%,rgba(0,0,0,0.3) 51%,rgba(0,0,0,0.6) 100%) $base; /* W3C */
}


@mixin rgba-bg ($hex, $alpha, $ie: $useIEFilters) {
  @if $ie == 1 {
    background-color: none;
    $hexopac: ie-hex-str(rgba($hex, $alpha));
        filter: progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$hexopac}',EndColorStr='#{$hexopac}}');
    -ms-filter: quote(progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$hexopac}',EndColorStr='#{$hexopac}'));
  }
  @else {
    background-color: $hex;
    background-color: rgba($hex, $alpha);
  }
}


@mixin opacity($trans) {
  filter: alpha(opactiy=($trans * 100));
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$trans * 100})";
  -moz-opacity: $trans;
  -khtml-opacity: $trans;
  opacity: $trans;
}

@mixin perspective($perspective) {
     -moz-perspective: $perspective;
      -ms-perspective: $perspective;
  -webkit-perspective: $perspective;
          perspective: $perspective;
     -moz-transform-style: preserve-3d;
      -ms-transform-style: preserve-3d;
  -webkit-transform-style: preserve-3d;
          transform-style: preserve-3d;
}

@mixin transform ($transforms) {
     -moz-transform: $transforms;
       -o-transform: $transforms;
      -ms-transform: $transforms;
  -webkit-transform: $transforms;
          transform: $transforms;
}
@mixin transform-origin ($transform-origin) {
     -moz-transform-origin: $transform-origin;
       -o-transform-origin: $transform-origin;
      -ms-transform-origin: $transform-origin;
  -webkit-transform-origin: $transform-origin;
          transform-origin: $transform-origin;
}


    @mixin matrix ($a, $b, $c, $d, $e, $f) {
         -moz-transform: matrix($a, $b, $c, $d, #{$e}px, #{$f}px);
           -o-transform: matrix($a, $b, $c, $d, $e, $f);
          -ms-transform: matrix($a, $b, $c, $d, $e, $f);
      -webkit-transform: matrix($a, $b, $c, $d, $e, $f);
              transform: matrix($a, $b, $c, $d, $e, $f);
    }

    @mixin rotate ($deg) {
      @include transform(rotate(#{$deg}deg));
    }

    @mixin scale ($size) {
      @include transform(scale(#{$size}));
    }

    @mixin translate ($x, $y) {
      @include transform(translate($x, $y));
    }

@mixin transition ($value) {
     -moz-transition: $value;
       -o-transition: $value;
      -ms-transition: $value;
  -webkit-transition: $value;
          transition: $value;
}
@mixin animation($value) {
  -webkit-animation: $value;
     -moz-animation: $value;
       -o-animation: $value;
          animation: $value;
}
// ==== /CSS3 SASS MIXINS ====